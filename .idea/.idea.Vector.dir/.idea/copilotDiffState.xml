<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Source/Voxel/Private/Entity/Entity.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Source/Voxel/Private/Entity/Entity.cpp" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Source/Voxel/Private/Entity/EntityChunk.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Source/Voxel/Private/Entity/EntityChunk.cpp" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Source/Voxel/Private/EntityChunkComponent.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Source/Voxel/Private/EntityChunkComponent.cpp" />
              <option name="updatedContent" value="#include &quot;EntityChunkComponent.h&quot;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Source/Voxel/Private/Logic/EntityChunk.cpp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Source/Voxel/Private/Logic/EntityChunk.cpp" />
              <option name="updatedContent" value="#include &quot;Logic/EntityChunk.h&quot;&#10;#include &quot;Managers/EntityManager.h&quot;&#10;&#10;void UEntityChunk::Initialize(UEntityManager* InManager)&#10;{&#10;&#9;EntityManager = InManager;&#10;}&#10;&#10;void UEntityChunk::Tick(float DeltaTime)&#10;{&#10;&#9;// 이 청크에 대한 로직을 매 프레임 실행합니다. (예: 특정 액터 이동, 상태 변화 등)&#10;}&#10;&#10;void UEntityChunk::AddVoxel(const FIntVector&amp; VoxelCoord)&#10;{&#10;&#9;ManagedVoxels.Add(VoxelCoord);&#10;}&#10;&#10;void UEntityChunk::RemoveVoxel(const FIntVector&amp; VoxelCoord)&#10;{&#10;&#9;ManagedVoxels.Remove(VoxelCoord);&#10;}&#10;&#10;void UEntityChunk::MergeWith(UEntityChunk* OtherChunk)&#10;{&#10;&#9;if (!OtherChunk || OtherChunk == this) return;&#10;&#10;&#9;// 다른 청크의 복셀들을 현재 청크로 이동시킵니다.&#10;&#9;ManagedVoxels.Append(OtherChunk-&gt;GetVoxels());&#10;&#9;&#10;&#9;// 이동된 복셀들이 이제 현재 청크를 가리키도록 맵을 업데이트합니다.&#10;&#9;UpdateVoxelMap();&#10;}&#10;&#10;const TSet&lt;FIntVector&gt;&amp; UEntityChunk::GetVoxels() const&#10;{&#10;&#9;return ManagedVoxels;&#10;}&#10;&#10;bool UEntityChunk::IsEmpty() const&#10;{&#10;&#9;return ManagedVoxels.IsEmpty();&#10;}&#10;&#10;void UEntityChunk::UpdateVoxelMap()&#10;{&#10;&#9;if (EntityManager)&#10;&#9;{&#10;&#9;&#9;for (const FIntVector&amp; VoxelCoord : ManagedVoxels)&#10;&#9;&#9;{&#10;&#9;&#9;&#9;EntityManager-&gt;UpdateVoxelChunkMapping(VoxelCoord, this);&#10;&#9;&#9;}&#10;&#9;}&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Source/Voxel/Public/Entity/Entity.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Source/Voxel/Public/Entity/Entity.h" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Source/Voxel/Public/Entity/EntityChunk.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Source/Voxel/Public/Entity/EntityChunk.h" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Source/Voxel/Public/EntityChunkComponent.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Source/Voxel/Public/EntityChunkComponent.h" />
              <option name="updatedContent" value="#pragma once&#10;&#10;#include &quot;CoreMinimal.h&quot;&#10;#include &quot;EntityChunkComponent.generated.h&quot;&#10;&#10;struct FVoxelEntityData;&#10;&#10;UCLASS(Abstract, BlueprintType)&#10;class VOXEL_API UEntityChunkComponent : public UObject {&#10;  GENERATED_BODY()&#10;&#10;public:&#10;  virtual void OnEntityAdded(const FIntVector&amp; VoxelCoord, const FVoxelEntityData&amp; Data) {}&#10;  virtual void OnEntityRemoved(const FIntVector&amp; VoxelCoord, const FVoxelEntityData&amp; Data) {}&#10;  virtual void OnEntityModified(const FIntVector&amp; VoxelCoord, const FVoxelEntityData&amp; Data) {}&#10;  virtual void Tick(float DeltaTime) {}&#10;&#10;protected:&#10;  UPROPERTY()&#10;  TObjectPtr&lt;class UEntityChunk&gt; OwnerChunk;&#10;&#10;  friend class UEntityChunk;&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Source/Voxel/Public/Logic/EntityChunk.h">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Source/Voxel/Public/Logic/EntityChunk.h" />
              <option name="updatedContent" value="#pragma once&#10;&#10;#include &quot;CoreMinimal.h&quot;&#10;#include &quot;EntityChunk.generated.h&quot;&#10;&#10;class UEntityManager;&#10;&#10;UCLASS()&#10;class VOXEL_API UEntityChunk : public UObject&#10;{&#10;&#9;GENERATED_BODY()&#10;&#10;public:&#10;&#9;void Initialize(UEntityManager* InManager);&#10;&#9;void Tick(float DeltaTime);&#10;&#10;&#9;void AddVoxel(const FIntVector&amp; VoxelCoord);&#10;&#9;void RemoveVoxel(const FIntVector&amp; VoxelCoord);&#10;&#9;void MergeWith(UEntityChunk* OtherChunk);&#10;&#10;&#9;const TSet&lt;FIntVector&gt;&amp; GetVoxels() const;&#10;&#9;bool IsEmpty() const;&#10;&#10;&#9;// 이 청크에 속한 모든 복셀의 맵을 업데이트합니다.&#10;&#9;void UpdateVoxelMap();&#10;&#10;private:&#10;&#9;UPROPERTY()&#10;&#9;TSet&lt;FIntVector&gt; ManagedVoxels;&#10;&#10;&#9;UPROPERTY()&#10;&#9;TObjectPtr&lt;UEntityManager&gt; EntityManager;&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>